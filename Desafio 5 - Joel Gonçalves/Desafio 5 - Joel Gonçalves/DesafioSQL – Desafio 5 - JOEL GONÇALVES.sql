--CRIAR FUNCTION ONDE IRÁ CONTAR VALORES DISTINTOS DA COLUNA CALCULADA
ALTER FUNCTION CONTAGEM_VALORES_DISTINTOS_ID (@ID INT)
RETURNS INT
AS
BEGIN
    DECLARE @RESULT INT;
    SELECT @RESULT = COUNT(DISTINCT VALOR_UNITARIO)
    FROM PEDIDOS_ITENS
    WHERE PEDIDOID = @ID;
	
    RETURN @RESULT;
END;
GO


-- ADD COLUNA VALORES_DISTINTOS CHAMANDO A FUNÇÃO CRIADA ACIMADA
ALTER TABLE PEDIDOS_ITENS 
ADD VALORES_DISTINTOS AS (DBO.CONTAGEM_VALORES_DISTINTOS_ID(PEDIDOID));
GO


--CRIAR COLUNA TOTAL_VALORES_DISTINTOS NA TABELA PEDIDOS ONDE RECEBERÁ O VALOR DA COLUNA CALCULADA DA PEDIDOS_ITENS
ALTER TABLE PEDIDOS
ADD TOTAL_VALORES_DISTINTOS INT;
GO


-- CRIAR ÍNDICE NA COLUNA CRIADA ACIMA
CREATE INDEX IX_TOTAL_ITEM_INDEXED ON PEDIDOS (TOTAL_VALORES_DISTINTOS);

-- ESSE UPDATE SERÁ EXECUTA UMA ÚNICA VEZ, APENAS PARA ATUALIZAR O CAMPO TOTAL_VALORES_DISTINTOS A PRIMEIRA VEZ
UPDATE PEDIDOS
	SET PEDIDOS.TOTAL_VALORES_DISTINTOS = PEDIDOS_ITENS.VALORES_DISTINTOS
FROM PEDIDOS
		INNER JOIN PEDIDOS_ITENS ON
			PEDIDOS.PEDIDOID = PEDIDOS_ITENS.PEDIDOID
GO


-- TIGER PARA TODA VEZ QUE UM ITEM FOR ADD, ATUALIZA O TOTAL_VALORES_DISTINTOS
ALTER TRIGGER TRG_ATUALIZAVALORESDISTINTOS
ON PEDIDOS_ITENS
AFTER INSERT, UPDATE
AS
BEGIN
    UPDATE PEDIDOS
		SET PEDIDOS.TOTAL_VALORES_DISTINTOS = INSERTED.VALORES_DISTINTOS 
    FROM PEDIDOS 
			INNER JOIN INSERTED ON
				PEDIDOS.PEDIDOID = INSERTED.PEDIDOID
END
GO



-- executar a query por ultimo
SELECT 
	PEDIDOS.PEDIDOID,
	PEDIDOS.CLIENTEID,
	PEDIDOS.DATAPEDIDO,
	SUM(B.QUANTIDADE) AS QUANTIDADETOTAL,
	SUM(B.VALOR_UNITARIO) AS VALORTOTAL,
	B.VALOR_UNITARIO
FROM PEDIDOS
		CROSS APPLY (SELECT QUANTIDADE, VALOR_UNITARIO
						FROM PEDIDOS_ITENS
						WHERE PEDIDOS.PEDIDOID = PEDIDOS_ITENS.PEDIDOID) B
WHERE PEDIDOS.TOTAL_VALORES_DISTINTOS = 1
GROUP BY PEDIDOS.PEDIDOID, PEDIDOS.CLIENTEID, PEDIDOS.DATAPEDIDO, B.VALOR_UNITARIO
ORDER BY PEDIDOS.DATAPEDIDO DESC, PEDIDOS.PEDIDOID DESC
